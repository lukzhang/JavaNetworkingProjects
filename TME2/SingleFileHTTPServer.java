/*
I declare that this assignment is my own work and that all material previously 
written or published in any source by any other person has been duly acknowledged 
in the assignment. I have not submitted this work, or a significant part thereof, 
previously as part of any academic program. In submitting this assignment I give 
permission to copy it for assessment purposes only.

Author: Luke Zhang
Student Number: 3330978
Assignment 2, Question 1 & 2
May 18, 2018

DESIGN:
This creates working server that is able to send multiple files to the client
such as .html, .png, .jpg, .pdf. The program can take up to 3 arguments. The first
is the path to the directory of where the index.html file is. The second is the 
port number. The third is the encoding. If the 2nd and 3rd arguments are not inputted, 
port 80 and UTF-8 are used by default. Once the server is set up, the client can
go to the webpage via localhost. At the same time, the server prints a logfile where
the directory of index.html is. This logfile records the clients address, date of request,
path to file requests, the response code, and the file size. This logfile can be used with
Assignment 1's program part 1 to read the weblog. 



TEST PLAN

1. Run the application: 
In Command Prompt, go to directory of this program. Make sure to seth path to
java files (i.e.: set path=%path%; "My path")
Tell system where to find JDK programs: javac SingleFileHTTPServer.java
Run program with 2 args (rather than 3); first is path to the directory with index.html, 
second is the port number. Ports above 8000 are a safe bet (eg. 8080)
eg: java SingleFileHTTPServer "C:\Users\Luke\Desktop\COMP348\SampleHTML" 8080
Open up Chrom and type in: "localhost:8080"

EXPECTED:
    Prints the HTML contents. Can navigate the index.html page and see the .jpg, .png, .gif files.
Can Retrieve the .pdf and .txt contents. Link works fine.
ACTUAL:
    Works as expected

2. Input the second arg to the file (index.html) rather than directory
eg: java SourceViewer2 "C:\Users\Luke\Desktop\COMP348\SampleHTML\theLogFile.txt" 8080

EXPECTED:
  Gives error warning SEVERE
ACTUAL:
  As expected

3. Input the second arg to a directory that doesn't have an index.html file

EXPECTED:
  Gives error warning SEVERE
ACTUAL:
  As expected

4. Run the logefile "theLogFile.txt" that is generated by the server in Assignment 1
eg. java PooledWeblog "C:\Users\Luke\Desktop\COMP348\SampleHTML\theLogFile.txt" 1

EXPECTED:
  Prints each line in the file and shows the number of accesses by each host (myself)
ACTUAL:
  As expected

4. Run the logefile "theLogFile.txt" using option 2 with PooledWeblog
eg. java PooledWeblog "C:\Users\Luke\Desktop\COMP348\SampleHTML\theLogFile.txt" 2

EXPECTED:
  Prints total bytes transmitted
ACTUAL:
  As expected

5. Run the logefile "theLogFile.txt" using option 3 with PooledWeblog
eg. java PooledWeblog "C:\Users\Luke\Desktop\COMP348\SampleHTML\theLogFile.txt" 3

EXPECTED:
  Prints total bytes by each remote host (myself)
ACTUAL:
  As expected

6. Do the same procedures above, but with Firefox instead of Chrome

EXPECTED:
  Works as before
ACTUAL:
  As expected



  


REFERENCES:
Base code was taken from "Java Network Programming" by Elliotte Rusty Harold
from Chapter 9. The other code was taken from Luke Zhang' Assignment 1, which used
Harold's work from Chapter 4. 

*/


import java.io.*;
import java.net.*;
import java.nio.charset.Charset;
import java.nio.file.*;
import java.util.concurrent.*;
import java.util.logging.*;
import java.nio.file.Files;
import java.util.*;
import java.text.SimpleDateFormat;

public class SingleFileHTTPServer {

  private static final Logger logger = Logger.getLogger("SingleFileHTTPServer");

  private final byte[] content;
  private final byte[] header;
  private final int port;
  private final String encoding;

  private static String indexFileName = "index.html";
  File docroot;
  static String rootPath;

  public SingleFileHTTPServer(String data, String encoding, 
      String mimeType, int port) throws UnsupportedEncodingException {    
    this(data.getBytes(encoding), encoding, mimeType, port);
  }

  public SingleFileHTTPServer(
      byte[] data, String encoding, String mimeType, int port) {
    this.content = data;
    this.port = port;
    this.encoding = encoding;
    String header = "HTTP/1.0 200 OK\r\n"
        + "Server: OneFile 2.0\r\n"
        + "Content-length: " + this.content.length + "\r\n"
        + "Content-type: " + mimeType + "; charset=" + encoding + "\r\n\r\n";
    this.header = header.getBytes(Charset.forName("US-ASCII"));
  }

  public void start() {
    ExecutorService pool = Executors.newFixedThreadPool(100);
    try (ServerSocket server = new ServerSocket(this.port)) {      
      logger.info("Accepting connections on port " + server.getLocalPort());
      logger.info("Data to be sent:");
      logger.info(new String(this.content, encoding));

      while (true) {
        try {
          Socket connection = server.accept();
          pool.submit(new HTTPHandler(connection));
        } catch (IOException ex) {
          logger.log(Level.WARNING, "Exception accepting connection", ex);
        } catch (RuntimeException ex) {
          logger.log(Level.SEVERE, "Unexpected error", ex);
        }
      }
    } catch (IOException ex) {
      logger.log(Level.SEVERE, "Could not start server", ex);
    }
  }

  private class HTTPHandler implements Callable<Void> {
    private final Socket connection;

    HTTPHandler(Socket connection) {
      this.connection = connection;
    }

    @Override
    public Void call() throws IOException {
      try {
        BufferedOutputStream raw = new BufferedOutputStream(
                          connection.getOutputStream()
                         );         
      Writer out = new OutputStreamWriter(raw);
        Reader in = new InputStreamReader(
                   new BufferedInputStream(
                    connection.getInputStream()
                   ),"US-ASCII"
                  );
        // read the first line only; that's all we need
        StringBuilder request = new StringBuilder();
        

        while (true) {
          int c = in.read();
          if (c == '\r' || c == '\n') break;
          request.append((char) c);
        }

        String get = request.toString();
        String[] tokens = get.split("\\s+");
        String method = tokens[0];
        String version = "";

      
      //Service the GET request, and find the filename based on the 2nd token
      //Add the filename to the path where the index is
        if(method.equals("GET")){
          String fileName = tokens[1];
        if (fileName.endsWith("/")) fileName += indexFileName;
        String contentType = 
            URLConnection.getFileNameMap().getContentTypeFor(fileName);
        if (tokens.length > 2) {
          version = tokens[2];
        }

        File theFile = new File(rootPath, 
            fileName.substring(1, fileName.length()));

        //Read the data from the file, and send the file
        if (theFile.canRead()) {
          byte[] theData = Files.readAllBytes(theFile.toPath());

          if (version.startsWith("HTTP/")) { // send a MIME header
            sendHeader(out, "HTTP/1.0 200 OK", contentType, theData.length);
          } 
         
          // send the file; it may be an image or other binary data 
          // so use the underlying output stream 
          // instead of the writer
          raw.write(theData);
          raw.flush();
        }


      //*************************************************************
      //***************LOGGING CAPABILITIES*************************
      //************************************************************
        //Client address
        InetAddress addr = connection.getLocalAddress();
        String hostAddr = addr.getHostAddress();

        //File size
        long length = theFile.length();
        //Response code
        int code = 200;

        Date now = new Date();
        SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd/MMM/yyyy:HH:mm:ss Z");
        String date = DATE_FORMAT.format(now);

        if(contentType != null){        

         String content = hostAddr + " - - [" + date + "] \"" + method + " "
          + contentType + " " + version + "\" " + code + " " + length;

          //Logfile
          File file = new File(rootPath, "theLogFile.txt");

          //If logfile hasn't been created, create one
          if(!file.exists()){
            try{
              file.createNewFile();
            }
            catch(Exception e){
              e.printStackTrace();
            }                     
          }
          //If it has been created, append the content to the file
          else{
            try{
              FileWriter fileW = new FileWriter(file, true);   
              BufferedWriter buffW = new BufferedWriter(fileW);
              buffW.write(content);
              buffW.newLine();
              buffW.close();
              fileW.close();
            }
            catch(Exception e){
              e.printStackTrace();
            }
          }
       
        }
        }
        else { // can't find the file
          String body = new StringBuilder("<HTML>\r\n")
              .append("<HEAD><TITLE>File Not Found</TITLE>\r\n")
              .append("</HEAD>\r\n")
              .append("<BODY>")
              .append("<H1>HTTP Error 404: File Not Found</H1>\r\n")
              .append("</BODY></HTML>\r\n").toString();
         
          out.flush();
        }
      } catch (IOException ex) {  
        logger.log(Level.WARNING, "Error writing to client", ex);
      } finally {
        connection.close(); 
      }
      return null;
    }
  }


  private void sendHeader(Writer out, String responseCode,
      String contentType, int length)
      throws IOException {
    out.write(responseCode + "\r\n");
    Date now = new Date();
    out.write("Date: " + now + "\r\n");
    out.write("Server: JHTTP 2.0\r\n");
    out.write("Content-length: " + length + "\r\n");
    out.write("Content-type: " + contentType + "\r\n\r\n");
    out.flush();
  }



  public static void main(String[] args) {

    // set the port to listen on
    int port;
    try {
      port = Integer.parseInt(args[1]);
      if (port < 1 || port > 65535) port = 80;
    } catch (RuntimeException ex) {
      port = 80;
    }  

    String encoding = "UTF-8";
    if (args.length > 2) encoding = args[2]; 

    try {       
      
      //Make the first argument the directory path
      rootPath = args[0];
      Path path = Paths.get(args[0] + "/" +indexFileName);;
      byte[] data = Files.readAllBytes(path);

      String contentType = URLConnection.getFileNameMap().getContentTypeFor(args[0]);
      SingleFileHTTPServer server = new SingleFileHTTPServer(data, encoding,
          contentType, port);
      server.start();         

    } catch (ArrayIndexOutOfBoundsException ex) {
      System.out.println(
          "Usage: java SingleFileHTTPServer filename port encoding");
    } catch (IOException ex) {
      logger.severe(ex.getMessage());
    }
  }
}